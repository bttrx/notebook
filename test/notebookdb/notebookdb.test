#-------------------------------------------------------------------------
# TITLE:
#    notebookdb.test
#
# PROJECT:
#    notebook: Notebook Personal Wiki
#
# DESCRIPTION:
#    notebookdb(n): Test Suite
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# Load the tcltest package

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.3
    eval ::tcltest::configure $argv
}

namespace import ::tcltest::test

#-------------------------------------------------------------------------
# Load the package to be tested

source ../../lib/notebookdb/pkgModules.tcl
namespace import ::notebookdb::*


# Handle notifications

proc Notify {op name} {
    global notifyList

    lappend notifyList $op $name
}

# Cleanup before each test.

proc cleanup {} {
    global notifyList

    set notifyList {}

    if {[file exists pages.dat]} {
        file delete pages.dat
    }

    if {[file exists pages.bak]} {
        file delete pages.bak
    }

    if {[info command ::db] != ""} {
        ::db destroy
    }
}


#-----------------------------------------------------------------------
# Database creation

test creation-1.1 {creation but no -dbfile} -body {
    catch {notebookdb create db} result
    set result
} -cleanup {
    cleanup
} -result {Error in constructor: required option -dbfile is missing.}

test creation-1.2 {creation with new -dbfile} -body {
    notebookdb create db -dbfile pages.dat
    list [db cget -dbfile] [file exists [db cget -dbfile]]
} -cleanup {
    cleanup
} -result {pages.dat 0}

test creation-1.3 {-dbfile cannot be changed} -body {
    notebookdb create db -dbfile pages.dat
    set result {}
    catch {db configure -dbfile newfile.dat} result
    set result
} -cleanup {
    cleanup
} -result {option -dbfile can only be set at instance creation}

test creation-1.4 {contents of new -dbfile} -body {
    notebookdb create db -dbfile pages.dat
    db pages
} -cleanup {
    cleanup
} -result {}

#-----------------------------------------------------------------------
# exists

test exists-1.1 {page existence/nonexistence} -body {
    notebookdb create db -dbfile pages.dat
    db set Home "Where the heart is!"
    list [db exists Home] [db exists Office]
} -cleanup {
    cleanup
} -result {1 0}

#-----------------------------------------------------------------------
# pageids

test pageids-1.1 {get pageids} -body {
    notebookdb create db -dbfile pages.dat
    db set Home {} 
    db set "Recent Changes" {} 
    db pageids
} -cleanup {
    cleanup
} -result {home {recent changes}}

#-----------------------------------------------------------------------
# get

test get-1.1 {get page text} -body {
    notebookdb create db -dbfile pages.dat
    db set One "My First Page"
    db set Two "My Second Page"
    list [db get One] [db get Two]
} -cleanup {
    cleanup
} -result {{My First Page
} {My Second Page
}}

#-----------------------------------------------------------------------
# lock/unlock/locked

test locks-1.1 {pages are not locked by default} -body {
    notebookdb create db -dbfile pages.dat
    db set Home {}
    db locked Home
} -cleanup {
    cleanup
} -result {0}

test locks-1.2 {pages can be locked and unlocked} -body {
    notebookdb create db -dbfile pages.dat
    db set Home {}
    set a [db locked Home]
    db lock Home
    set b [db locked Home]
    db unlock Home
    set c [db locked Home]
    list $a $b $c
} -cleanup {
    cleanup
} -result {0 1 0}

#-----------------------------------------------------------------------
# set

test set-1.1 {set creates page} -body {
    notebookdb create db -dbfile pages.dat
    db set Foo Bar
    list [db exists Foo] [db get Foo]
} -cleanup {
    cleanup
} -result {1 {Bar
}}

test set-1.2 {set changes page} -body {
    notebookdb create db -dbfile pages.dat
    db set Home Bar
    db get Home
} -cleanup {
    cleanup
} -result {Bar
}

test set-1.3 {can't set locked page} -body {
    notebookdb create db -dbfile pages.dat
    db set Home ""
    db lock Home
    set result ""
    catch {db set Home Bar} result
    set result
} -cleanup {
    cleanup
} -result {Error, 'Home' is locked.}

#-----------------------------------------------------------------------
# name

test name-1.1 {get canonical name} -body {
    notebookdb create db -dbfile pages.dat
    db set Home {}
    list [db name home] [db name hOmE]
} -cleanup {
    cleanup
} -result {Home Home}

#-----------------------------------------------------------------------
# pagetime

test pagetime-1.1 {page time is current for new pages} -body {
    set t1 [clock seconds]
    notebookdb create db -dbfile pages.dat
    after 2000
    db set Home {}
    set t2 [db pagetime Home]

    expr {$t1 <= $t2}
} -cleanup {
    cleanup
} -result {1}

test pagetime-1.2 {page time formats} -body {
    set d1 [clock format [clock seconds] -format "%D"]
    notebookdb create db -dbfile pages.dat
    db set Home {}
    set d2 [db pagetime Home "%D"]

    string equal $d1 $d2
} -cleanup {
    cleanup
} -result {1}

#-----------------------------------------------------------------------
# prevpage/nextpage

test prevnext-1.1 {get next page when there is one} -body {
    notebookdb create db -dbfile pages.dat
    db set A ""
    db set B ""
    db nextpage A
} -cleanup {
    cleanup
} -result {B}

test prevnext-1.2 {get next page when there isn't one} -body {
    notebookdb create db -dbfile pages.dat
    db set A ""
    db nextpage A
} -cleanup {
    cleanup
} -result {}

test prevnext-1.3 {get prev page when there is one} -body {
    notebookdb create db -dbfile pages.dat
    db set A ""
    db set B ""
    db prevpage B
} -cleanup {
    cleanup
} -result {A}

test prevnext-1.4 {get prev page when there isn't one} -body {
    notebookdb create db -dbfile pages.dat
    db set A ""
    db prevpage {A}
} -cleanup {
    cleanup
} -result {}



#-----------------------------------------------------------------------
# pagesbytime

test pagesbytime-1.1 {pagesbytime} -body {
    notebookdb create db -dbfile pages.dat
    db set A foo
    after 1000
    db set B foo
    after 1000
    db set C foo
    after 1000
    db set D foo
    after 1000
    db set E foo

    db pagesbytime
} -cleanup {
    cleanup
} -result {E D C B A}

#-----------------------------------------------------------------------
# search

test search-1.1 {searching: successful} -body {
    notebookdb create db -dbfile pages.dat
    db set A {John Doe}
    db set "John Jones" {}
    db set C {Sue Jones}
    db search John
} -cleanup {
    cleanup
} -result {A {John Jones}}

test search-1.2 {searching: unsuccessful} -body {
    notebookdb create db -dbfile pages.dat
    db set A {John Doe}
    db set "John Jones" {}
    db set C {Sue Jones}
    db search xyzzy
} -cleanup {
    cleanup
} -result {}

#-----------------------------------------------------------------------
# destroy

test destroy-1.1 {destroy gets rid of self} -body {
    notebookdb create db -dbfile pages.dat
    set a [info commands "::db"]
    db destroy
    set b [info commands "::db"]

    list $a $b
} -cleanup {
    cleanup
} -result {::db {}}

test destroy-1.2 {destroy gets rid of interpreter} -body {
    notebookdb create db -dbfile pages.dat
    set a [info commands "::db.interp"]
    db destroy
    set b [info commands "::db.interp"]

    list $a $b
} -cleanup {
    cleanup
} -result {::db.interp {}}

#-----------------------------------------------------------------------
# save

test save-1.1 {saving works} -body {
    notebookdb create db -dbfile pages.dat

    db set Foo Bar
    db save
    db destroy

    notebookdb create db -dbfile pages.dat
    db get Foo
} -cleanup {
    cleanup
} -result {Bar}


#-----------------------------------------------------------------------
# eval

test eval-1.1 {eval evaluates} -body {
    notebookdb create db -dbfile pages.dat
    db eval {expr {2 + 2}}
} -cleanup {
    cleanup
} -result {4}

test eval-1.2 {eval evaluates} -body {
    notebookdb create db -dbfile pages.dat
    db eval expr {2 + 2}
} -cleanup {
    cleanup
} -result {4}

#-----------------------------------------------------------------------
# alias

test alias-1.1 {alias aliases} -body {
    proc procToAlias {value} {
        return $value
    }

    notebookdb create db -dbfile pages.dat
    db alias howdy procToAlias Howdy
    db eval howdy
} -cleanup {
    cleanup
} -result {Howdy}

#-----------------------------------------------------------------------
# expand

test expand-1.1 {expand expands} -body {
    notebookdb create db -dbfile pages.dat
    db expand {*[@expr 2 + 2@]*}
} -cleanup {
    cleanup
} -result {*4*}

#-----------------------------------------------------------------------
# pageexpand

test pageexpand-1.1 {pageexpand expands pages} -body {
    notebookdb create db -dbfile pages.dat
    db set Foo {*[@expr 2 + 2@]*} 
    db pageexpand Foo 
} -cleanup {
    cleanup
} -result {*4*
}

#-----------------------------------------------------------------------
# delete

test delete-1.1 {delete page} -body {
    notebookdb create db -dbfile pages.dat
    db set Home ""
    set a [db exists Home]
    db delete Home
    set b [db exists Home]
    list $a $b
} -cleanup {
    cleanup
} -result {1 0}

test delete-1.2 {can't delete locked page} -body {
    notebookdb create db -dbfile pages.dat
    db set Home ""
    db lock Home
    set result {}
    catch {db delete Home} result
    set result
} -cleanup {
    cleanup
} -result {Error, 'Home' is locked.}


#-----------------------------------------------------------------------
# rename

test rename-1.1 {rename page} -body {
    notebookdb create db -dbfile pages.dat
    db set Foo {*[Foo]*}
    db set Bar {+[Foo]+}
    db rename Foo Quux
    list \
        [db exists Foo] \
        [db exists Quux] \
        [string trim [db get Quux]] \
        [string trim [db get Bar]]
} -cleanup {
    cleanup
} -result {0 1 {*[Quux]*} {+[Quux]+}}

test rename-1.2 {can't rename locked page} -body {
    notebookdb create db -dbfile pages.dat
    db set Home ""
    db lock Home

    catch {db rename Home Office} result
    set result
} -cleanup {
    cleanup
} -result {Error, 'Home' is locked.}

test rename-1.3 {can't rename nonexistent page} -body {
    notebookdb create db -dbfile pages.dat
    set result {}
    catch {db rename Office Study} result
    set result
} -cleanup {
    cleanup
} -result {Cannot rename 'Office'; no such page.}

test rename-1.4 {can't rename to existing page} -body {
    notebookdb create db -dbfile pages.dat
    db set Index ""
    db set Home ""

    catch {db rename Index Home} result
    set result
} -cleanup {
    cleanup
} -result {The name 'Home' is already in use.}


#-----------------------------------------------------------------------
# notifycommand

test notify-1.1 {notify on set} -body {
    notebookdb create db -dbfile pages.dat
    db register Me Notify
    db set Foo Bar

    set notifyList
} -cleanup {
    cleanup
} -result {set Foo}

test notify-1.2 {notify on delete} -body {
    notebookdb create db -dbfile pages.dat
    db register Me Notify
    db set Foo Bar
    db delete Foo

    set notifyList
} -cleanup {
    cleanup
} -result {set Foo delete Foo}

test notify-1.3 {notify on rename to change case} -body {
    notebookdb create db -dbfile pages.dat
    db register Me Notify
    db set foo Bar
    db rename foo Foo

    set notifyList
} -cleanup {
    cleanup
} -result {set foo set Foo}

test notify-1.4 {notify on normal rename} -body {
    notebookdb create db -dbfile pages.dat
    db register Me Notify
    db set One xyz
    db set Two {[One]}
    db rename One Uno

    set notifyList
} -cleanup {
    cleanup
} -result {set One set Two rename {One Uno}}

test notify-1.5 {register and unregister notify} -body {
    notebookdb create db -dbfile pages.dat
    db register Me Notify
    db set One xyz
    db unregister Me
    db delete One

    set notifyList
} -cleanup {
    cleanup
} -result {set One}

test notify-1.6 {multiple observers} -body {
    notebookdb create db -dbfile pages.dat
    db register Me Notify
    db register You Notify
    db set One xyz

    set notifyList
} -cleanup {
    cleanup
} -result {set One set One}


#-------------------------------------------------------------------------
# Cleanup

::tcltest::cleanupTests
